openapi: 3.0.0
info:
  version: '1.0'
  title: "Assignments OpenAPI 3.0"
  description: API for managing book's reviews.
  license:
    name: GNU General Public License 3.0
servers:
  - url: http://assignments-api.herokuapp.com.com
    description: Heroku
  - url: http://localhost:8000
    description: Localhost
paths:
  /api/books:
    get:
      description: >-
        Gets a detailed list of all Books.
      summary: View all books
      parameters:
        - name: title
          in: query
          description: Title (or part of it) of the books you are searching for
          schema:
            type: string
        - name: author
          in: query
          description: Author name (or part of it) of the books you are searching for
          schema:
            type: string
        - name: genre
          in: query
          description: Genre name (or part of it) of the books you are searching for
          schema:
            type: string
        - name: from_year
          in: query
          description: Year from which you want to get results
          schema:
            type: integer
        - name: to_year
          in: query
          description: Year to which you want to get results
          schema:
            type: integer
        - name: from_rating
          in: query
          description: Rating from which you want to get results
          schema:
            type: integer
        - name: to_rating
          in: query
          description: Rating to which you want to get results
          schema:
            type: integer
      responses:
        '200':
          description: 'Detailed collection of books'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          $ref: '#/components/responses/error-400'
        '500':
          $ref: '#/components/responses/error-500'
    post:
      security:
        - bearerAuth: []
      summary: Create a book
      description: >-
        Create a new book
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - isbn
                - title
                - author
                - year
                - genre
              properties:
                isbn:
                  type: string
                  description: "Isbn of the new book"
                title:
                  type: string
                  description: "Title of the new book"
                author: 
                  type: string
                  description: "Author of the new book"
                year:
                  type: integer
                  description: "Year of the new book"
                genre:
                  type: string
                  description: "Genre of the new book"
      responses:
        '201':
          description: 'Book created. Link in the Location header'
          headers:
            'Location':
              schema:
                type: string
              description: Link to the newly created book.
        '400':
          $ref: '#/components/responses/error-400'
        '401':
          $ref: '#/components/responses/error-401'
        '500':
          $ref: '#/components/responses/error-500'
  /api/books/{isbn}:
    get:
      description: >-
        Gets information about a specific book, identified by the isbn
      summary: Get a book
      parameters:
        - in: path
          name: isbn
          schema:
            type: string
          required: true
          description: 'isbn of the book'
      responses:
        '200':
          description: 'The book description'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          $ref: '#/components/responses/error-404'
  /api/books/{isbn}/reviews:
    get:
      summary: "Get all review of a specific book"
      description: >-
        List of a books's reviews
      parameters:
        - in: path
          name: isbn
          schema:
            type: string
          required: true
          description: 'isbn of the book'
      responses:
        '200':
          description: 'Detailed collection of a book reviews'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '404':
          $ref: '#/components/responses/error-404'
        '500':
          $ref: '#/components/responses/error-500'
    post:
      security:
        - bearerAuth: []
      summary: Create a Review
      description: >-
        Create a new review
      parameters:
        - in: path
          name: isbn
          schema:
            type: string
          required: true
          description: 'isbn of the book'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - description
                - rating
              properties:
                description:
                  type: string
                  description: "New Review's description"
                rating:
                  type: integer
                  description: "New Book rating"
      responses:
        '201':
          description: 'Review created succesfully. Link in the Location header'
          headers:
            'Location':
              schema:
                type: string
              description: Link to the newly created review.
        '400':
          $ref: '#/components/responses/error-400'
        '401':
          $ref: '#/components/responses/error-401'
        '500':
          $ref: '#/components/responses/error-500'
  /api/users:
    post:
      summary: Create a user
      description: >-
        Create a new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
                - surname
              properties:
                email:
                  type: string
                  description: "New user's email address"
                password:
                  type: string
                  description: "New user's password"
                name: 
                  type: string
                  description: "New user's first name"
                surname:
                  type: string
                  description: "New user's family name"
                phone:
                  type: string
                  description: "New user's phone number"
      responses:
        '201':
          description: 'User created succesfully. Link in the Location header'
          headers:
            'Location':
              schema:
                type: string
              description: Link to the newly created user.
        '400':
          $ref: '#/components/responses/error-400'
        '500':
          $ref: '#/components/responses/error-500'
  /api/users/{id}:
    get:
      summary: "Info about a user"
      description: >-
        Detailed info about the user
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: 'id of the user'
      responses:
        '200':
          description: 'The user description'
          content:
            application/json:
              schema:
                type: object
                properties:
                  self:
                    type: string
                    description: "Link to this object"
                  id:
                    type: string
                    description: "Unique id of this user"
                  name:
                    type: string
                    description: "User's first name"
                  surname:
                    type: string
                    description: "User's family name"
                  email:
                    type: string
                    description: "User's email address"
                  phone:
                    type: string
                    description: "User's phone number"
        '404':
          $ref: '#/components/responses/error-404'
        '500':
          $ref: '#/components/responses/error-500'
    put:
      security:
        - bearerAuth: []
      summary: "Update user info"
      description: >-
        "Update some user's info"
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: 'id of the user'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  description: "Updated user's password"
                name: 
                  type: string
                  description: "Updated user's first name"
                surname:
                  type: string
                  description: "Updated user's family name"
                phone:
                  type: string
                  description: "Updated user's phone number"
      responses:
        '200':
          description: 'User succesfully modified, no content'
        '400':
          $ref: '#/components/responses/error-400'
        '401':
          $ref: '#/components/responses/error-401'
        '404':
          $ref: '#/components/responses/error-404'
        '500':
          $ref: '#/components/responses/error-500'
  /api/users/{id}/reviews:
      get:
        summary: "Get all review of a specific user"
        description: >-
          All the reviews made by a user
        parameters:
          - in: path
            name: id
            schema:
              type: string
            required: true
            description: 'unique id of the user'
        responses:
          '200':
            description: 'Detailed collection of all the reviews made by a user'
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Review'
          '404':
            $ref: '#/components/responses/error-404'
          '500':
            $ref: '#/components/responses/error-500'
  /api/login:
    post:
      summary: Login endpoint
      description: "Logs a user in with email & password"  #in the future this endpoint will provide an authentication token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
               - email
               - password
              properties:
                email:
                  type: string
                  description: "User's email address"
                password:
                  type: string
                  description: "User's personal password"
      responses:
        '200':
          description: "Login was successful"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: "The newly generated token"
        '400':
          $ref: "#/components/responses/error-400"
        '500':
          $ref: '#/components/responses/error-500'
  /api/reviews/{id}:
    get:
      summary: "Info about a review"
      description: >-
        Detailed info about the review
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: 'id of the review'
      responses:
        '200':
          description: 'Detailed info about the review'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '404':
          $ref: '#/components/responses/error-404'
        '500':
          $ref: '#/components/responses/error-500'
    delete:
      security:
        - bearerAuth: []
      summary: "Delete a review"
      description: >-
        Delete a review
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: 'id of the review'
      responses:
        '200':
          description: 'Review was correctly deleted'
        '401':
          $ref: '#/components/responses/error-401'
        '404':
          $ref: '#/components/responses/error-404'
        '500':
          $ref: '#/components/responses/error-500'
    put:
      security:
        - bearerAuth: []
      summary: "Update a review"
      description: >-
        Update a review
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: 'id of the review'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - description
                - rating
              properties:
                description:
                  type: string
                  description: "New Review's description"
                rating:
                  type: integer
                  description: "New Book rating"
      responses:
        '200':
          description: 'Review was correctly updated'
        '401':
          $ref: '#/components/responses/error-401'
        '404':
          $ref: '#/components/responses/error-404'
        '500':
          $ref: '#/components/responses/error-500'
          
  /api/reviews/{id}/like:
    post:
      security:
        - bearerAuth: []
      summary: "Like a review"
      description: >-
        Mark this review as liked
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: 'id of the review'
      responses:
        '200':
          description: 'Operation completed correctly'
        '401':
          $ref: '#/components/responses/error-401'
        '404':
          $ref: '#/components/responses/error-404'
        '500':
          $ref: '#/components/responses/error-500'
    delete:
      security:
        - bearerAuth: []
      summary: "Remove like from a review"
      description: >-
        Remove the like from this review
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: 'id of the review'
      responses:
        '200':
          description: 'Operation completed correctly'
        '400':
          $ref: '#/components/responses/error-400'
        '401':
          $ref: '#/components/responses/error-401'
        '404':
          $ref: '#/components/responses/error-404'
        '500':
          $ref: '#/components/responses/error-500'
          
  /api/reviews/{id}/dislike:
    post:
      security:
        - bearerAuth: []
      summary: "Dislike a review"
      description: >-
        Mark this review as disliked
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: 'id of the review'
      responses:
        '200':
          description: 'Operation completed correctly'
        '401':
          $ref: '#/components/responses/error-401'
        '404':
          $ref: '#/components/responses/error-404'
        '500':
          $ref: '#/components/responses/error-500'
    delete:
      security:
        - bearerAuth: []
      summary: "Remove dislike from a review"
      description: >-
        Remove dislike from this review
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: 'id of the review'
      responses:
        '200':
          description: 'Operation completed correctly'
        '400':
          $ref: '#/components/responses/error-400'
        '401':
          $ref: '#/components/responses/error-401'
        '404':
          $ref: '#/components/responses/error-404'
        '500':
          $ref: '#/components/responses/error-500'
          
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Book:
      type: object
      properties:
        self:
          type: string
          description: 'Link to this object'
        isbn:
          type: string
          description: 'Isbn of the book'
        title:
          type: string
          description: 'Title of the book'
        author:
          type: string
          description: 'Author of the book'
        year: 
          type: integer
          description: 'Year of the first release'
        genre:
          type: string
          description: 'Genre of the book'
        rating:
          type: integer
          description: 'Rating of the book (0 - 5)'
        user:
          type: string
          description: 'User that created this book'
    Review:
      type: object
      properties:
        self:
          type: string
          description: "Link to this object"
        id:
          type: string
          description: "Review's id"
        description:
          type: string
          description: "Review's description"
        rating:
          type: integer
          description: "Book rating"
        book: 
          type: string
          description: "Book isbn of this review"
        user:
          type: string
          description: "User id of the review owner"
        date:
          type: string
          description: "Creation date and time"
        likes:
          type: integer
          description: "Number of likes"
        dislikes:
          type: integer
          description: "Number of dislikes"

  responses:
      error-400:
        description: Invalid request
        content:
          application/json:
            schema:
              type: object 
              properties:
                error:
                  type: string
                  description: Detailed description about the error
      error-401:
        description: Unauthorized
        content:
          application/json:
            schema:
              type: object 
              properties:
                error:
                  type: string
                  description: Detailed description about the error
      error-404:
        description: Not found
        content: 
          application/json:
            schema:
              type: object 
              properties:
                error:
                  type: string
                  description: Detailed description about the error
      error-500:
        description: Server error
        content: 
          application/json:
            schema:
              type: object 
              properties:
                error:
                  type: string
                  description: Detailed description about the error
                message:
                  type: string
                  description: Additional information about the error